// Code generated by protoc-gen-go. DO NOT EDIT.
// source: my_service.proto

package myservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EServer struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EServer) Reset()         { *m = EServer{} }
func (m *EServer) String() string { return proto.CompactTextString(m) }
func (*EServer) ProtoMessage()    {}
func (*EServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ab241122eea0, []int{0}
}

func (m *EServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EServer.Unmarshal(m, b)
}
func (m *EServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EServer.Marshal(b, m, deterministic)
}
func (m *EServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EServer.Merge(m, src)
}
func (m *EServer) XXX_Size() int {
	return xxx_messageInfo_EServer.Size(m)
}
func (m *EServer) XXX_DiscardUnknown() {
	xxx_messageInfo_EServer.DiscardUnknown(m)
}

var xxx_messageInfo_EServer proto.InternalMessageInfo

func (m *EServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ab241122eea0, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*EServer)(nil), "myservice.EServer")
	proto.RegisterType((*Result)(nil), "myservice.Result")
}

func init() { proto.RegisterFile("my_service.proto", fileDescriptor_a845ab241122eea0) }

var fileDescriptor_a845ab241122eea0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xad, 0x8c, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xad,
	0x84, 0x0a, 0x28, 0x29, 0x72, 0xb1, 0xbb, 0x06, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x09, 0x89, 0x71,
	0xb1, 0x15, 0x83, 0x59, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x92, 0x01, 0x17,
	0x5b, 0x50, 0x6a, 0x71, 0x69, 0x4e, 0x89, 0x90, 0x10, 0x17, 0x4b, 0x72, 0x7e, 0x4a, 0x2a, 0x58,
	0x9e, 0x35, 0x08, 0xcc, 0x06, 0x89, 0xa5, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x81, 0xf5, 0x80, 0xd9,
	0x46, 0x4e, 0x5c, 0x9c, 0xbe, 0x95, 0xc1, 0x10, 0x1b, 0x84, 0x4c, 0xb9, 0xb8, 0xdc, 0x53, 0x4b,
	0x3c, 0xf3, 0x52, 0x32, 0x93, 0x53, 0x8b, 0x85, 0x84, 0xf4, 0xe0, 0x76, 0xeb, 0x41, 0x2d, 0x96,
	0x12, 0x44, 0x12, 0x83, 0xd8, 0xa4, 0xc4, 0xe0, 0xa4, 0xc1, 0x25, 0x92, 0x9c, 0x9f, 0xab, 0x97,
	0x54, 0x9c, 0x9c, 0x93, 0x93, 0x8c, 0x50, 0xe0, 0xc4, 0x07, 0x37, 0x39, 0x00, 0xe4, 0x97, 0x00,
	0xc6, 0x24, 0x36, 0xb0, 0xa7, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xdb, 0x78, 0xd6,
	0xe8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyServiceClient interface {
	GetIndices(ctx context.Context, in *EServer, opts ...grpc.CallOption) (*Result, error)
}

type myServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyServiceClient(cc *grpc.ClientConn) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) GetIndices(ctx context.Context, in *EServer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/myservice.MyService/GetIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServiceServer is the server API for MyService service.
type MyServiceServer interface {
	GetIndices(context.Context, *EServer) (*Result, error)
}

// UnimplementedMyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (*UnimplementedMyServiceServer) GetIndices(ctx context.Context, req *EServer) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndices not implemented")
}

func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	s.RegisterService(&_MyService_serviceDesc, srv)
}

func _MyService_GetIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).GetIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.MyService/GetIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).GetIndices(ctx, req.(*EServer))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndices",
			Handler:    _MyService_GetIndices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "my_service.proto",
}
